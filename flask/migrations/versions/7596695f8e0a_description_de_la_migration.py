"""Description de la migration

Revision ID: 7596695f8e0a
Revises: 
Create Date: 2025-05-16 09:24:16.507878

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7596695f8e0a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('abonnement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('abonné_id', sa.Integer(), nullable=False),
    sa.Column('abonnement_id', sa.Integer(), nullable=False),
    sa.Column('date_suivi', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['abonnement_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['abonné_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('comments_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['comments_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('replie',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('comment_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('replies')
    op.drop_table('notifications')
    op.drop_table('abonnements')
    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=200),
               nullable=True)
        batch_op.drop_constraint('category_post_id_fkey', type_='foreignkey')
        batch_op.drop_column('post_id')

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('media_url',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               nullable=True)

    with op.batch_alter_table('signalement', schema=None) as batch_op:
        batch_op.alter_column('date_signalement',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', sa.String(length=50), nullable=False))
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('private',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('pseudo',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("''::text"))
        batch_op.create_unique_constraint(None, ['email'])
        batch_op.drop_column('roles')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('roles', sa.VARCHAR(), server_default=sa.text("'50'::character varying"), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('pseudo',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("''::text"))
        batch_op.alter_column('private',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.drop_column('role')

    with op.batch_alter_table('signalement', schema=None) as batch_op:
        batch_op.alter_column('date_signalement',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.alter_column('media_url',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('title',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.add_column(sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('category_post_id_fkey', 'post', ['post_id'], ['id'])
        batch_op.alter_column('description',
               existing_type=sa.String(length=200),
               type_=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    op.create_table('abonnements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('abonné_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('abonnement_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_achat', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['abonnement_id'], ['user.id'], name='abonnements_abonnement_id_fkey'),
    sa.ForeignKeyConstraint(['abonné_id'], ['user.id'], name='abonnements_abonné_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='abonnements_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comments_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['comments_id'], ['comments.id'], name='notifications_comments_id_fkey'),
    sa.ForeignKeyConstraint(['post_id'], ['post.id'], name='notifications_post_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='notifications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('replies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('comment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], name='replies_comment_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='replies_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='replies_pkey')
    )
    op.drop_table('replie')
    op.drop_table('notification')
    op.drop_table('abonnement')
    # ### end Alembic commands ###
